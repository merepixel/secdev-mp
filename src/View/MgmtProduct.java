/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.SQLite;
import Model.Product;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import Model.User;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;


/**
 *
 * @author beepxD
 */
public class MgmtProduct extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;
    private User currentUser;
    String timestamp = new java.text.SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(new java.util.Date());

    private void enforceRoleAccess() {
        if (currentUser == null) return;

        int role = currentUser.getRole();

        if (role == 3 || role == 4) {
            // Manager and Staff: can Add, Edit, Delete but not Purchase
            purchaseBtn.setVisible(false);
        } 

        if (role == 2) {
            // Manager and Staff: can Add, Edit, Delete but not Purchase
            addBtn.setVisible(false);
            editBtn.setVisible(false);
            deleteBtn.setVisible(false);
        } 
        
        if (role == 1 || role == 5) {
            // All others: no access to any management buttons
            addBtn.setVisible(false);
            editBtn.setVisible(false);
            deleteBtn.setVisible(false);
            purchaseBtn.setVisible(false);
        }
    
    }

    public void setCurrentUser(User user) {
        this.currentUser = user;
        enforceRoleAccess();
    }
    
    public MgmtProduct(SQLite sqlite) {
        initComponents();
        this.sqlite = sqlite;
        tableModel = (DefaultTableModel)table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));

//        UNCOMMENT TO DISABLE BUTTONS
//        purchaseBtn.setVisible(false);
//        addBtn.setVisible(false);
//        editBtn.setVisible(false);
//        deleteBtn.setVisible(false);
    }

    private boolean isAuthorized() {
        return currentUser != null && (currentUser.getRole() == 2 || currentUser.getRole() == 3 || currentUser.getRole() == 4);
    }

    public void init(){

        if (!isAuthorized()) {
            JOptionPane.showMessageDialog(this, "Unauthorized access.");
            return;
        }

        //      CLEAR TABLE
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        
//      LOAD CONTENTS
        ArrayList<Product> products = sqlite.getProduct();
        for(int nCtr = 0; nCtr < products.size(); nCtr++){
            tableModel.addRow(new Object[]{
                products.get(nCtr).getName(), 
                products.get(nCtr).getStock(), 
                products.get(nCtr).getPrice()});
        }
    }
    
    public void designer(JTextField component, String text){
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        purchaseBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Stock", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(50);
            table.getColumnModel().getColumn(1).setMaxWidth(100);
            table.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        purchaseBtn.setBackground(new java.awt.Color(255, 255, 255));
        purchaseBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        purchaseBtn.setText("PURCHASE");
        purchaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseBtnActionPerformed(evt);
            }
        });

        addBtn.setBackground(new java.awt.Color(255, 255, 255));
        addBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        editBtn.setBackground(new java.awt.Color(255, 255, 255));
        editBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.setToolTipText("");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(purchaseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purchaseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void purchaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseBtnActionPerformed
        if (table.getSelectedRow() >= 0) {
        String productName = tableModel.getValueAt(table.getSelectedRow(), 0).toString(); 
        SQLite db = new SQLite();
        Product product = db.getProductByName(productName);  

            if (product == null) {
                JOptionPane.showMessageDialog(this, "Product not found.");
                return;
            }

            JTextField stockFld = new JTextField("0");
            designer(stockFld, "PRODUCT STOCK");

            Object[] message = {
                "How many " + productName + " do you want to purchase?", stockFld
            };

            int result = JOptionPane.showConfirmDialog(null, message, "PURCHASE PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

            if (result == JOptionPane.OK_OPTION) {
                try {
                    int quantity = Integer.parseInt(stockFld.getText());

                    if (quantity <= 0) {
                        JOptionPane.showMessageDialog(this, "Quantity must be positive.");
                        return;
                    }

                    if (quantity > product.getStock()) {
                        JOptionPane.showMessageDialog(this, "Not enough stock available.");
                        return;
                    }

                    int newStock = product.getStock() - quantity;
                    db.updateProductStock(product.getId(), newStock); // You implement this
                    JOptionPane.showMessageDialog(this, "Purchase successful.");

                    String timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
                    sqlite.insertHistory(currentUser.getUsername(), product.getName(), quantity, timestamp);

                    this.init();

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid number.");
                }
            }
        }
    }//GEN-LAST:event_purchaseBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        if (currentUser.getRole() != 3 && currentUser.getRole() != 4) {
            JOptionPane.showMessageDialog(this, "Access denied.");
            return;
        }


        JTextField nameFld = new JTextField();
        JTextField stockFld = new JTextField();
        JTextField priceFld = new JTextField();

        designer(nameFld, "PRODUCT NAME");
        designer(stockFld, "PRODUCT STOCK");
        designer(priceFld, "PRODUCT PRICE");

        Object[] message = {
            "Insert New Product Details:", nameFld, stockFld, priceFld
        };

        int result = JOptionPane.showConfirmDialog(null, message, "ADD PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

        if (result == JOptionPane.OK_OPTION) {
            String name = nameFld.getText().trim();
            int stock = Integer.parseInt(stockFld.getText().trim());
            double price = Double.parseDouble(priceFld.getText().trim());

            try {
                stock = Integer.parseInt(stockFld.getText().trim());
                price = Double.parseDouble(priceFld.getText().trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Stock and price must be valid numbers.");
                return;
            }

            if (name.isEmpty() || stock < 0 || price < 0.0) {
                JOptionPane.showMessageDialog(this, "Invalid input.");
                return;
            }

            if (sqlite.productExists(name)) {
                JOptionPane.showMessageDialog(this, "A product with this name already exists.");
                return;
            }

            if (name.trim().isEmpty() || stock < 0 || price < 0.0) {
                JOptionPane.showMessageDialog(this, "Invalid input. Ensure the name is not empty and stock/price are non-negative.");
                return;
            }

            if (sqlite.addProduct(name, stock, price)) {
                Timestamp now = new Timestamp(System.currentTimeMillis());
                sqlite.addLogs("Add Product", currentUser.getUsername(), "Added " + name + " with stock " + stock + " and price " + price, now);
                JOptionPane.showMessageDialog(this, "Product added successfully.");
                init();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add product. Please try again.");
            }

            System.out.println(nameFld.getText());
            System.out.println(stockFld.getText());
            System.out.println(priceFld.getText());
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed

        if (currentUser.getRole() != 3 && currentUser.getRole() != 4) {
            JOptionPane.showMessageDialog(this, "Access denied.");
            return;
        }

        if(table.getSelectedRow() >= 0){
            String originalName = tableModel.getValueAt(table.getSelectedRow(), 0).toString();

            JTextField nameFld = new JTextField(originalName);
            JTextField stockFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 1).toString());
            JTextField priceFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 2).toString());

            designer(nameFld, "PRODUCT NAME");
            designer(stockFld, "PRODUCT STOCK");
            designer(priceFld, "PRODUCT PRICE");

            Object[] message = {
                "Edit Product Details:", nameFld, stockFld, priceFld
            };

            int result = JOptionPane.showConfirmDialog(null, message, "EDIT PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

            if (result == JOptionPane.OK_OPTION) {
                try {
                    String newName = nameFld.getText().trim();
                    int newStock = Integer.parseInt(stockFld.getText().trim());
                    double newPrice = Double.parseDouble(priceFld.getText().trim());

                    // Simple validation
                    if (newName.isEmpty() || newStock < 0 || newPrice < 0.0) {
                        JOptionPane.showMessageDialog(this, "Invalid input. Please check the fields.");
                        return;
                    }

                    if (!newName.equals(originalName) && sqlite.productExists(newName)) {
                        JOptionPane.showMessageDialog(this, "That name is already in use.");
                        return;
                    }

                    if (!sqlite.productExists(originalName)) {
                        JOptionPane.showMessageDialog(this, "The product you are trying to edit no longer exists.");
                        return;
                    }
                    
                    if (sqlite.editProduct(originalName, newName, newStock, newPrice)) {
                        Timestamp now = new Timestamp(System.currentTimeMillis());
                        sqlite.addLogs("Edit Product", currentUser.getUsername(), "Edited " + originalName + " to " + newName + ", stock: " + newStock + ", price: " + newPrice, now);
                        JOptionPane.showMessageDialog(this, "Product updated successfully.");
                        init(); // Refresh product list
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to update product.");
                    }

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Stock and Price must be valid numbers.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a product to edit.");
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if (currentUser.getRole() != 3 && currentUser.getRole() != 4) {
            JOptionPane.showMessageDialog(this, "Access denied.");
            return;
        }

        if(table.getSelectedRow() >= 0){
            String name = tableModel.getValueAt(table.getSelectedRow(), 0).toString();

            int result = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete \"" + name + "\"?",
            "DELETE PRODUCT",
            JOptionPane.YES_NO_OPTION
        );

            if (result == JOptionPane.YES_OPTION) {

                if (!sqlite.productExists(name)) {
                    JOptionPane.showMessageDialog(this, "The product you are trying to delete no longer exists.");
                    return;
                }
                
                if (sqlite.deleteProduct(name)) {
                    Timestamp now = new Timestamp(System.currentTimeMillis());
                    sqlite.addLogs("Delete Product", currentUser.getUsername(), "Deleted product: " + name, now);
                    JOptionPane.showMessageDialog(this, "Product deleted successfully.");
                    init(); // Refresh product list
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete product.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a product to delete.");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton purchaseBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
